{"config":{"lang":["ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"recipe/array/","title":"\u56fa\u5b9a\u9577\u914d\u5217","text":""},{"location":"recipe/array/#stdarray","title":"std::array","text":"<p>array\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u8981\u7d20\u6570\u3092\u6c7a\u3081\u308b\u305f\u3081\u3001\u5b9f\u884c\u6642\u306b\u8981\u7d20\u6570\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002</p> <p>\u53ef\u5909\u9577\u914d\u5217vector</p> <pre><code>std::vector&lt;int&gt; v(10); // \u8981\u7d20\u657010\u3067\u521d\u671f\u5316\nv.at(0) = 1;\n\nauto iter = std::begin(v);\n</code></pre> <p>\u56fa\u5b9a\u9577\u914d\u5217array</p> <pre><code>std::array&lt;int, 10&gt; a; // \u8981\u7d20\u657010\u3067\u5909\u66f4\u4e0d\u53ef\na.at(0) = 1;\n\nauto iter = std::begin(a);\n</code></pre>"},{"location":"recipe/enum/","title":"\u5217\u6319\u578b","text":""},{"location":"recipe/enum/#enumenum-class","title":"enum\u3068enum class","text":"<p>C++\u3067\u306f\u4ee5\u4e0b\u306e2\u3064\u306e\u5217\u6319\u578b\u3092\u5229\u7528\u3067\u304d\u308b\u3002 \u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u4f8b\u306e\u5834\u5408\u3001Poodle\u3060\u3068\u540d\u524d\u885d\u7a81\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u304c\u3001enum class\u3067\u306fE_Dog::Poodle\u3068\u3044\u3046\u3088\u3046\u306b\u578b\u540d\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u306a\u305f\u3081\u3001\u540d\u524d\u885d\u7a81\u304c\u8d77\u304d\u306a\u304f\u306a\u3063\u305f\u3002</p> \u7a2e\u985e \u30b9\u30b3\u30fc\u30d7\u6709\u7121 \u5099\u8003 enum \u30b9\u30b3\u30fc\u30d7\u306a\u3057\u5217\u6319\u578b C\u8a00\u8a9e\u3067\u5229\u7528\u3067\u304d\u308benum\u3068\u307b\u307c\u540c\u3058\u5217\u6319\u578b enum class \u30b9\u30b3\u30fc\u30d7\u306a\u3057\u5217\u6319\u578b C++\u3067\u65b0\u898f\u8ffd\u52a0\u3055\u308c\u305f\u53c2\u7167\u7bc4\u56f2\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u306a\u5217\u6319\u578b <p>C\u8a00\u8a9e\u306b\u3088\u308benum</p> <pre><code>typedef enum\n{\n  Poodle,\n  Shiba,\n  Chihuahua,\n  Bulldog,\n} E_Dog;\n\nint main(void) {\n  E_Dog dog = Poodle;\n\n  return 0;\n}\n</code></pre> <p>C++\u306eenum class</p> <pre><code>enum class E_Dog // (1)!\n{\n  Poodle,\n  Shiba,\n  Chihuahua,\n  Bulldog,\n};\n\nint main() {\n  E_Dog = dog = E_Dog::Poodle;\n\n  return 0;\n}\n</code></pre> <ol> <li>enum class\u306fenum struct\u3068\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u3002</li> </ol>"},{"location":"recipe/if_declare/","title":"if\u6761\u4ef6\u5f0f\u5185\u3067\u5909\u6570\u5ba3\u8a00","text":""},{"location":"recipe/if_declare/#_1","title":"\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9","text":"<p>C++17\u4ee5\u964d\u304b\u3089\u3001if\u6761\u4ef6\u5185\u3067\u5909\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002</p> <pre><code>if (auto i = 1 + 2; i &gt; 2) {\n  std::cout &lt;&lt; \"i is greater than 2: \" &lt;&lt; i &lt;&lt; std::endl;\n}\n</code></pre> <pre><code>constexpr auto threshold = 0.5;\nconstexpr auto e = std::numeric_limits&lt;double&gt;::epsilon();\nif (const auto distance = std::hypot(x1 - x0, y1 - y0); std::abs(distance - threshold) &lt;= e) {\n  std::cout &lt;&lt; \"Reached Goal!\" &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"recipe/min_max_element/","title":"vector\u306e\u6700\u5c0f\u5024\u30fb\u6700\u5927\u5024\u3092\u8fd4\u3059","text":""},{"location":"recipe/min_max_element/#min_element-max_element","title":"min_element, max_element","text":"<pre><code>std::vector&lt;int&gt; v1 = {3, 1, 4};\n\nconst auto min_iter = std::min_element(v1.begin(), v1.end()); // (1)!\nconst auto max_iter = std::max_element(v1.begin(), v1.end());\n\nconst int min_value = *min_iter; // 1\nconst int max_value = *max_iter; // 4\n\nstd::size_t min_index = std::distance(v1.begin(), min_iter);  // 1 (2)\nstd::size_t max_index = std::distance(v1.begin(), max_iter);  // 2\n</code></pre> <ol> <li>\u8fd4\u308a\u5024\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\uff08std::vector::iterator\uff09\u3002 <li>distance\u3067\u305d\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002</li>"},{"location":"recipe/min_max_element/#_1","title":"\u53c2\u8003","text":"<ul> <li>https://cpprefjp.github.io/reference/algorithm/max_element.html</li> <li>https://cpprefjp.github.io/reference/iterator/distance.html</li> <li>https://qiita.com/shirakawa4756/items/f4cc65c6b2b412b10c0c</li> </ul>"},{"location":"recipe/pimpl/","title":"Pimpl\uff08\u30d4\u30fc\u30a4\u30f3\u30d7\u30eb\uff09\u30a4\u30c7\u30a3\u30aa\u30e0","text":""},{"location":"recipe/pimpl/#pimpl_1","title":"Pimpl","text":"<p>pointer to implementation\u306e\u7565\u3002 class\u306eprivate\u306b\u3057\u3066\u3082\u5916\u90e8\u304b\u3089\u95b2\u89a7\u3067\u304d\u3066\u3057\u307e\u3046\u3002\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u306e\u304cpimpl\u3002</p>"},{"location":"recipe/pimpl/#_1","title":"\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9","text":"<p>pimpl\u5c0e\u5165\u524d\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066</p> hello_world.h<pre><code>class HelloWorld\n{\npublic:\n  HelloWorld();\n  ~HelloWorld();\n\nprivate:\n  void printHelloWorld();\n};\n</code></pre> hello_world.cpp<pre><code>#include \"hello_world.h\"\n\nHelloWorld::HelloWorld()\n{\n  printHelloWorld();\n}\n\nHelloWorld::~HelloWorld()\n{\n}\n\nvoid HelloWorld::printHelloWorld()\n{\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n}\n</code></pre> <p>pimpl\u5c0e\u5165\u5f8c\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066</p> hello_world.h<pre><code>class HelloWorld\n{\npublic:\n  HelloWorld();\n  ~HelloWorld();\n\nprivate:\n  class Impl;\n  std::unique_ptr&lt;Impl&gt; hello_world; // (1)!\n};\n</code></pre> <ol> <li>private\u3067class\u5ba3\u8a00</li> </ol> hello_world.cpp<pre><code>#include \"hello_world.h\"\n\nclass HelloWorld::Impl // (1)!\n{\npublic:\n  void printHelloWorld();\n};\n\nHelloWorld::HelloWorld()\n: hello_world(new HelloWorld::Impl()) // (2)!\n{\n  hello_world-&gt;printHelloWorld();\n}\n\nHelloWorld::~HelloWorld()\n{\n}\n\nvoid HelloWorld::Impl::printHelloWorld() // (3)!\n{\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n}\n</code></pre> <ol> <li>Impl\u30af\u30e9\u30b9\u306e\u4f5c\u6210\u3002public\u306b\u3082\u3068\u3082\u3068private\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9f\u88c5\u3002</li> <li>Impl\u30af\u30e9\u30b9\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3002</li> <li>\u3082\u3068\u3082\u3068private\u3067\u884c\u3044\u305f\u304b\u3063\u305f\u5b9f\u88c5\u3092\u3053\u3061\u3089\u306b\u8a18\u8ff0\u3002</li> </ol>"},{"location":"recipe/pimpl/#_2","title":"\u53c2\u8003","text":"<ul> <li>https://qiita.com/CASL0/items/0f9889851dcf8ae22665</li> <li>https://qiita.com/ashdik/items/b6b9924113f7e8d531cf</li> </ul>"},{"location":"recipe/stod/","title":"\u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db","text":""},{"location":"recipe/stod/#stod-stol","title":"stod, stol\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b","text":"<p>\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</p> <pre><code>double a = std::stod(\"100.0\");  // 100.0\ndouble b = std::stod(\"-100.0\"); // -100.0\ndouble c = std::stod(5e3);      // 5000.0\ndouble d = std::stod(\"abc\");    // throws an exception (std::invalid_argument)\ndouble e = std::stod(\"3hoge\");  // 3.0 (1)\n</code></pre> <ol> <li>\u9014\u4e2d\u307e\u3067\u6570\u5024\u306e\u3082\u306e\u306f\u6570\u5024\u90e8\u5206\u304c\u51fa\u529b\u3055\u308c\u308b</li> </ol> <p>\u9032\u6570\u6307\u5b9a</p> <pre><code>double a = std::stod(\"0xFF\");              // 0 \uff0810\u9032\u6570\u3068\u3057\u3066\u8a8d\u8b58\uff09\ndouble b = std::stod(\"0xFF\", nullptr, 16); // 255 (16\u9032\u6570\u3068\u3057\u3066\u8a8d\u8b58)\ndouble c = std::stod(\"01101\", nullptr, 2); // 13 (2\u9032\u6570\u3068\u3057\u3066\u8a8d\u8b58) (1)\n</code></pre> <ol> <li>0b\u3067\u59cb\u307e\u308b\u6570\u5024\u306f2\u9032\u6570\u3068\u3057\u3066\u8a8d\u8b58\u3067\u304d\u306a\u3044\u3002</li> </ol> <p>\u6570\u5024\u3068\u3057\u3066\u89e3\u91c8\u3067\u304d\u306a\u3044\u6587\u5b57\u306e\u60c5\u5831\u3092\u683c\u7d0d</p> <pre><code>size_t idx = 0;\nstd::string s = \"10%\";\ndouble a = std::stod(s, &amp;idx);      // idx\u306b\u6570\u5024\u3068\u3057\u3066\u8a8d\u8b58\u3067\u304d\u306a\u3044\u6587\u5b57\u306e\u6700\u521d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u304c\u683c\u7d0d\nif (idx != a.size()) {\n  std::cout &lt;&lt; s[idx] &lt;&lt; std::endl; // %\n}\n</code></pre> <p>\u4ee5\u4e0b\u3001\u5168\u6587\u5b57\u5217\u304c\u6570\u5024\u3068\u3057\u3066\u8a8d\u8b58\u3067\u304d\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u95a2\u6570\u306e\u5b9f\u88c5\u4f8b\u3067\u3042\u308b\u3002</p> <pre><code>bool isNumericalString(const std::string &amp; s)\n{\n  size_t idx = 0;\n  std::stod(s, &amp;idx);\n  if (s.size() == idx) {\n    true;\n  }\n  return false;\n}\n</code></pre>"},{"location":"recipe/stod/#_2","title":"\u53c2\u8003","text":"<ul> <li>https://qiita.com/yohm/items/234e8b02a0fc96d3fa92</li> </ul>"},{"location":"recipe/transform/","title":"vector\u306e\u8981\u7d20\u5168\u3066\u306b\u51e6\u7406\u3092\u3059\u308b","text":""},{"location":"recipe/transform/#stdtransform","title":"std::transform","text":"<p>\u5168\u3066\u306e\u8981\u7d202\u500d\u3059\u308b\u30b3\u30fc\u30c9\u306e\u4f8b\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002</p> <p>std::transform\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408</p> <pre><code>const std::vector&lt;int&gt; x{1, 9, 8, 6, 12, 14};\nstd::vector&lt;int&gt; y(x.size());\n\nfor (const auto e : x) {\n  y.emplace_back(e * 2);\n}\n</code></pre> <p>std::transform\u3092\u4f7f\u3046\u5834\u5408</p> <pre><code>const std::vector&lt;int&gt; x{1, 9, 8, 6, 12, 14};\nstd::vector&lt;int&gt; y(x.size());\n\nstd::transform(\n  x.cbegin(), x,cend(), y.begin(),\n  [](const int e) {\n    return e * 2;\n  });\n</code></pre> <p>\u305d\u306e\u4ed6\u306e\u4f8b\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002</p> <pre><code>std::vector&lt;int&gt; v = {3, 1, 4};\nstd::vector&lt;std::string&gt; result;\n\nstd::transform(\n  v.begin(), v.end(), std::back_inserter(result),\n  [](int x) {\n    return std::to_string(x * 2);\n  });\n</code></pre>"},{"location":"recipe/transform/#_1","title":"\u53c2\u8003","text":"<ul> <li>https://qiita.com/IgnorantCoder/items/3101d6276e9bdddf872c</li> </ul>"}]}